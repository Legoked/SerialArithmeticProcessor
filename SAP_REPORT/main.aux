\relax 
\providecommand\babel@aux[2]{}
\@nameuse{bbl@beforestart}
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\babel@aux{english}{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Design}{2}{section.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces  Block diagram schematic of the DATAPATH module in Quartus Prime. The design includes inputs that are fed into registers, muxes, input processesors, etc. \relax }}{2}{figure.caption.4}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{figure}{{1}{2}{Block diagram schematic of the DATAPATH module in Quartus Prime. The design includes inputs that are fed into registers, muxes, input processesors, etc. \relax }{figure.caption.4}{}}
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces  Truth table that was derived from the DATAPATH module. The inputs are the 4-bit OpCodes that each represent a unique operation. This oepraiton corresponds to a certain instruction which is lsited on the far right column of the table. Note that the outputs for $x_i$ and $y_i$ each represent the 4-bit value for A and B; which make up the two integers whom of which are being operated on. \relax }}{2}{table.caption.6}\protected@file@percent }
\newlabel{table:1}{{1}{2}{Truth table that was derived from the DATAPATH module. The inputs are the 4-bit OpCodes that each represent a unique operation. This oepraiton corresponds to a certain instruction which is lsited on the far right column of the table. Note that the outputs for $x_i$ and $y_i$ each represent the 4-bit value for A and B; which make up the two integers whom of which are being operated on. \relax }{table.caption.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces  State diagram for the serial arithmetic prossesor. The ASM for this machine can be summed up in the following sentences: Hold in the initial state (T0) until \textbf  {START} is set to 1. Move through the remaining 5 states and return to $T0$ when completed. The value of \textbf  {START} does not matter while in states 1-4. The system will pause in $T5$ if \textbf  {START} is left at 1, and will only return to $T0$ if \textbf  {START} = 0. Asynchronously return to the initial state (T0) when the system \textbf  {RESET} is ‘0’ \relax }}{3}{figure.caption.9}\protected@file@percent }
\newlabel{figure}{{2}{3}{State diagram for the serial arithmetic prossesor. The ASM for this machine can be summed up in the following sentences: Hold in the initial state (T0) until \textbf {START} is set to 1. Move through the remaining 5 states and return to $T0$ when completed. The value of \textbf {START} does not matter while in states 1-4. The system will pause in $T5$ if \textbf {START} is left at 1, and will only return to $T0$ if \textbf {START} = 0. Asynchronously return to the initial state (T0) when the system \textbf {RESET} is ‘0’ \relax }{figure.caption.9}{}}
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces Transition table for the stage generator portion of the machine.\relax }}{3}{table.caption.11}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Block diagram figure of the state generator module used in the serial arithmetic processesor in Quartus Prime.\relax }}{4}{figure.caption.13}\protected@file@percent }
\newlabel{figure}{{3}{4}{Block diagram figure of the state generator module used in the serial arithmetic processesor in Quartus Prime.\relax }{figure.caption.13}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Waveform diagram of the state generator module indicating that the module is functioning as intended.\relax }}{4}{figure.caption.14}\protected@file@percent }
\newlabel{figure}{{4}{4}{Waveform diagram of the state generator module indicating that the module is functioning as intended.\relax }{figure.caption.14}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces ASM chart of the serial arithmetic processor. This chart in particular was used to develop the formulas for the control circuit. Note that the register instructions are purposely left implicit for the sake of a more approachable visual interpretation of the machine's instructions and operation.\relax }}{5}{figure.caption.17}\protected@file@percent }
\newlabel{figure}{{5}{5}{ASM chart of the serial arithmetic processor. This chart in particular was used to develop the formulas for the control circuit. Note that the register instructions are purposely left implicit for the sake of a more approachable visual interpretation of the machine's instructions and operation.\relax }{figure.caption.17}{}}
\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces  Truth table derived from the ASM chart in Figure 5. Since the instructions are implicitly stated, statements had to be translated. ``Hold Reg A'' will refer to literally holding the 4-bit number held in register A, but also represents the operation that the register will accomplish with the said number. \relax }}{5}{table.caption.18}\protected@file@percent }
\newlabel{table:1}{{3}{5}{Truth table derived from the ASM chart in Figure 5. Since the instructions are implicitly stated, statements had to be translated. ``Hold Reg A'' will refer to literally holding the 4-bit number held in register A, but also represents the operation that the register will accomplish with the said number. \relax }{table.caption.18}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Block diagram schematic of the control circuit module.\relax }}{6}{figure.caption.20}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Block diagram schematic of all three modules wired together to compose the serial arithmetic processor.\relax }}{6}{figure.caption.21}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces OpCode 0000 (DEC)\relax }}{7}{figure.caption.23}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces OpCode 0001 (INC)\relax }}{7}{figure.caption.23}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces OpCode0010 (ADD)\relax }}{7}{figure.caption.24}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces OpCode 0011 (SUB)\relax }}{7}{figure.caption.24}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces OpCode 0101 (AND)\relax }}{8}{figure.caption.25}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces OpCode 1010 (COMP)\relax }}{8}{figure.caption.25}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {14}{\ignorespaces Opcode 1111 (OR)\relax }}{8}{figure.caption.26}\protected@file@percent }
\gdef \@abspage@last{8}
